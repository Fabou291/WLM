components:
  schemas:
    registerValidator:
      type: object
      properties:
        email:
          type: string
          format: email
          example: bot@example.com
          maxLength: 255
          description: This field must be unique, an error will be thrown if it is not.
        password:
          type: string
          format: regex
          maxLength: 180
          minLength: 12
          pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[\w\W]{12,}$/
          example: TESTtest1234.
        passwordConfirmation:
          type: string
          format: regex
          maxLength: 180
          minLength: 12
          pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[\w\W]{12,}$/
          example: TESTtest1234.
          description: Must be equal to password field
        firstName:
          type: string
          maxLength: 255
          pattern: /^(?:(?!×Þß÷þ)[A-Za-zÀ-ÿ' -])+$/
          example: bot
        lastName:
          type: string
          maxLength: 255
          pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[\w\W]{12,}$/
          example: example
        gender:
          type: string
          enum: [male, female, unbinary]
          example: unbinary
        birthYear:
          type: number
          minimum: 1892
          maximum: 2022
          example: 2004
        alternateEmail:
          type: string
          format: email
          maxLength: 255
          description: This field must different of email
          example: anAlternativeMail@domain.com
        state:
          type: string
          maxLength: 255
          nullable: true
          pattern: /^(?:(?!×Þß÷þ)[A-Za-zÀ-ÿ' -])+$/
          example: loire
        zipCode:
          type: string
          maxLength: 5
          pattern: /^(?:2A|2B|\d{2})\d{3}$/
          example: 42100
      required: [email, password, passwordConfirmation, firstName, lastName, gender, alternateEmail]
